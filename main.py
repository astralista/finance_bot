import logging
import os
import sqlite3
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, \
    filters, ContextTypes


# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º
def format_money(amount):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–Ω–µ–∂–Ω—É—é —Å—É–º–º—É –∏–∑ 1234.56 –≤ —Ñ–æ—Ä–º–∞—Ç 1'234,56
    """
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    rounded_amount = round(amount, 2)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è —Ç–æ—á–∫–∞
    amount_str = str(rounded_amount)
    if '.' in amount_str:
        int_part, dec_part = amount_str.split('.')
    else:
        # –ï—Å–ª–∏ —Ç–æ—á–∫–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —á–∏—Å–ª–æ —Ü–µ–ª–æ–µ
        int_part = amount_str
        dec_part = '0'
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–ª—É—é —á–∞—Å—Ç—å —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á (–∞–ø–æ—Å—Ç—Ä–æ—Ñ–∞–º–∏)
    formatted_int = ''
    for i, digit in enumerate(reversed(int_part)):
        if i > 0 and i % 3 == 0:
            formatted_int = "'" + formatted_int
        formatted_int = digit + formatted_int
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –∏–º–µ–µ—Ç 2 –∑–Ω–∞–∫–∞
    dec_part = dec_part.ljust(2, '0')
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    return f"{formatted_int},{dec_part}"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    CATEGORY_NAME, CATEGORY_EDIT, CATEGORY_DELETE,
    SET_LIMIT, EDIT_LIMIT,
    ADD_EXPENSE, EXPENSE_AMOUNT
) = range(7)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY,
        name TEXT UNIQUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS limits (
        id INTEGER PRIMARY KEY,
        category_id INTEGER,
        amount REAL,
        month INTEGER,
        year INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (category_id) REFERENCES categories (id),
        UNIQUE(category_id, month, year)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS expenses (
        id INTEGER PRIMARY KEY,
        category_id INTEGER,
        amount REAL,
        date DATE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (category_id) REFERENCES categories (id)
    )
    ''')

    conn.commit()
    conn.close()


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤. '
        '–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã.\n\n'
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/categories - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n'
        '/limits - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n'
        '/expense - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n'
        '/report - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º'
    )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
async def categories_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data='list_categories')],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='add_category')],
        [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='edit_category')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='delete_category')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î
def get_categories():
    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM categories ORDER BY name")
    categories = cursor.fetchall()
    conn.close()
    return categories


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def list_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    categories = get_categories()

    if not categories:
        await query.edit_message_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'.")
        return

    current_month = datetime.now().month
    current_year = datetime.now().year

    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()

    result = "üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –æ—Å—Ç–∞—Ç–æ–∫ –ª–∏–º–∏—Ç–∞:\n\n"

    for cat_id, cat_name in categories:
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        cursor.execute("""
            SELECT amount FROM limits 
            WHERE category_id = ? AND month = ? AND year = ?
        """, (cat_id, current_month, current_year))
        limit_data = cursor.fetchone()
        limit_amount = limit_data[0] if limit_data else 0

        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        cursor.execute("""
            SELECT SUM(amount) FROM expenses 
            WHERE category_id = ? AND strftime('%m', date) = ? AND strftime('%Y', date) = ?
        """, (cat_id, f"{current_month:02d}", str(current_year)))

        spent_data = cursor.fetchone()
        spent_amount = spent_data[0] if spent_data[0] else 0

        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        remaining = limit_amount - spent_amount

        if remaining >= 0:
            result += f"‚úÖ {cat_name}: –æ—Å—Ç–∞–ª–æ—Å—å {format_money(remaining)} –∏–∑ {format_money(limit_amount)}\n"
        else:
            result += f"‚ùå {cat_name}: –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ {format_money(abs(remaining))} (–ª–∏–º–∏—Ç {format_money(limit_amount)})\n"

    conn.close()
    await query.edit_message_text(result)


# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def add_category_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    return CATEGORY_NAME


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def add_category_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category_name = update.message.text.strip()

    if not category_name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CATEGORY_NAME

    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()

    try:
        cursor.execute("INSERT INTO categories (name) VALUES (?)", (category_name,))
        conn.commit()
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except sqlite3.IntegrityError:
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        conn.close()

    return ConversationHandler.END


# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def edit_category_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    categories = get_categories()

    if not categories:
        await query.edit_message_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return ConversationHandler.END

    keyboard = []
    for cat_id, cat_name in categories:
        keyboard.append([InlineKeyboardButton(cat_name, callback_data=f'edit_{cat_id}')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
    return CATEGORY_EDIT


# –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def edit_category_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    cat_id = query.data.split('_')[1]
    context.user_data['edit_category_id'] = cat_id

    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM categories WHERE id = ?", (cat_id,))
    cat_name = cursor.fetchone()[0]
    conn.close()

    await query.edit_message_text(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {cat_name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    return CATEGORY_EDIT


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def edit_category_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text.strip()
    cat_id = context.user_data.get('edit_category_id')

    if not new_name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CATEGORY_EDIT

    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()

    try:
        cursor.execute("UPDATE categories SET name = ? WHERE id = ?", (new_name, cat_id))
        conn.commit()
        await update.message.reply_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'!")
    except sqlite3.IntegrityError:
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{new_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        conn.close()

    return ConversationHandler.END


# –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def delete_category_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    categories = get_categories()

    if not categories:
        await query.edit_message_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return ConversationHandler.END

    keyboard = []
    for cat_id, cat_name in categories:
        keyboard.append([InlineKeyboardButton(cat_name, callback_data=f'delete_{cat_id}')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    return CATEGORY_DELETE


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def delete_category_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    cat_id = query.data.split('_')[1]

    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM categories WHERE id = ?", (cat_id,))
    cat_name = cursor.fetchone()[0]
    conn.close()

    context.user_data['delete_category_id'] = cat_id
    context.user_data['delete_category_name'] = cat_name

    keyboard = [
        [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'confirm_delete_{cat_id}')],
        [InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='cancel_delete')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{cat_name}'?\n"
        "–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –ª–∏–º–∏—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=reply_markup
    )
    return CATEGORY_DELETE


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def delete_category_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith('confirm_delete_'):
        cat_id = context.user_data.get('delete_category_id')
        cat_name = context.user_data.get('delete_category_name')

        conn = sqlite3.connect('expenses.db')
        cursor = conn.cursor()

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        cursor.execute("DELETE FROM expenses WHERE category_id = ?", (cat_id,))
        cursor.execute("DELETE FROM limits WHERE category_id = ?", (cat_id,))
        cursor.execute("DELETE FROM categories WHERE id = ?", (cat_id,))

        conn.commit()
        conn.close()

        await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat_name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await query.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    return ConversationHandler.END


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏
async def limits_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç", callback_data='set_limit')],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç", callback_data='edit_limit')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:', reply_markup=reply_markup)


# –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞
async def set_limit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    categories = get_categories()

    if not categories:
        await query.edit_message_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞.")
        return ConversationHandler.END

    keyboard = []
    for cat_id, cat_name in categories:
        keyboard.append([InlineKeyboardButton(cat_name, callback_data=f'setlimit_{cat_id}')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞:", reply_markup=reply_markup)
    return SET_LIMIT


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞
async def set_limit_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    cat_id = query.data.split('_')[1]
    context.user_data['limit_category_id'] = cat_id

    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM categories WHERE id = ?", (cat_id,))
    cat_name = cursor.fetchone()[0]
    context.user_data['limit_category_name'] = cat_name

    current_month = datetime.now().month
    current_year = datetime.now().year

    cursor.execute("""
        SELECT amount FROM limits 
        WHERE category_id = ? AND month = ? AND year = ?
    """, (cat_id, current_month, current_year))

    limit_data = cursor.fetchone()
    current_limit = limit_data[0] if limit_data else 0
    conn.close()

    await query.edit_message_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}\n"
        f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –Ω–∞ {current_month}/{current_year}: {format_money(current_limit)}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    )
    return SET_LIMIT


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞
async def set_limit_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        limit_amount = float(update.message.text.strip())
        if limit_amount < 0:
            await update.message.reply_text(
                "–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return SET_LIMIT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return SET_LIMIT

    cat_id = context.user_data.get('limit_category_id')
    cat_name = context.user_data.get('limit_category_name')
    current_month = datetime.now().month
    current_year = datetime.now().year

    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏–º–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
    cursor.execute("""
        INSERT OR REPLACE INTO limits (category_id, amount, month, year)
        VALUES (?, ?, ?, ?)
    """, (cat_id, limit_amount, current_month, current_year))

    conn.commit()
    conn.close()

    await update.message.reply_text(
        f"–õ–∏–º–∏—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat_name}' –Ω–∞ {current_month}/{current_year} "
        f"—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {format_money(limit_amount)}"
    )

    return ConversationHandler.END


# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
async def add_expense_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    categories = get_categories()

    if not categories:
        await update.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é /categories.")
        return ConversationHandler.END

    keyboard = []
    for cat_id, cat_name in categories:
        keyboard.append([InlineKeyboardButton(cat_name, callback_data=f'expense_{cat_id}')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=reply_markup)
    return ADD_EXPENSE


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
async def add_expense_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    cat_id = query.data.split('_')[1]
    context.user_data['expense_category_id'] = cat_id

    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM categories WHERE id = ?", (cat_id,))
    cat_name = cursor.fetchone()[0]
    context.user_data['expense_category_name'] = cat_name
    conn.close()

    await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    return EXPENSE_AMOUNT


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
async def add_expense_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        expense_amount = float(update.message.text.strip())
        if expense_amount <= 0:
            await update.message.reply_text(
                "–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return EXPENSE_AMOUNT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return EXPENSE_AMOUNT

    cat_id = context.user_data.get('expense_category_id')
    cat_name = context.user_data.get('expense_category_name')
    today = datetime.now().date().isoformat()

    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥
    cursor.execute("""
        INSERT INTO expenses (category_id, amount, date)
        VALUES (?, ?, ?)
    """, (cat_id, expense_amount, today))

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –∏ —Ä–∞—Å—Ö–æ–¥—ã
    current_month = datetime.now().month
    current_year = datetime.now().year

    cursor.execute("""
        SELECT amount FROM limits 
        WHERE category_id = ? AND month = ? AND year = ?
    """, (cat_id, current_month, current_year))

    limit_data = cursor.fetchone()
    limit_amount = limit_data[0] if limit_data else 0

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    cursor.execute("""
        SELECT SUM(amount) FROM expenses 
        WHERE category_id = ? AND strftime('%m', date) = ? AND strftime('%Y', date) = ?
    """, (cat_id, f"{current_month:02d}", str(current_year)))

    spent_data = cursor.fetchone()
    spent_amount = spent_data[0] if spent_data[0] else 0

    conn.commit()
    conn.close()

    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    remaining = limit_amount - spent_amount

    if remaining >= 0:
        message = (
            f"‚úÖ –†–∞—Å—Ö–æ–¥ –∑–∞–ø–∏—Å–∞–Ω. –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat_name}'\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_money(expense_amount)}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –ª–∏–º–∏—Ç–∞: {format_money(remaining)}"
        )
    else:
        message = (
            f"‚ùå –†–∞—Å—Ö–æ–¥ –∑–∞–ø–∏—Å–∞–Ω. –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat_name}'\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_money(expense_amount)}\n"
            f"–í–Ω–∏–º–∞–Ω–∏–µ! –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {format_money(abs(remaining))}"
        )

    await update.message.reply_text(message)
    return ConversationHandler.END


# –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
async def show_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_month = datetime.now().month
    current_year = datetime.now().year

    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute("SELECT id, name FROM categories ORDER BY name")
    categories = cursor.fetchall()

    if not categories:
        await update.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
        conn.close()
        return

    report = f"üìä –û—Ç—á–µ—Ç –∑–∞ {current_month}/{current_year}:\n\n"
    total_limit = 0
    total_spent = 0

    for cat_id, cat_name in categories:
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç
        cursor.execute("""
            SELECT amount FROM limits 
            WHERE category_id = ? AND month = ? AND year = ?
        """, (cat_id, current_month, current_year))

        limit_data = cursor.fetchone()
        limit_amount = limit_data[0] if limit_data else 0
        total_limit += limit_amount

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        cursor.execute("""
            SELECT SUM(amount) FROM expenses 
            WHERE category_id = ? AND strftime('%m', date) = ? AND strftime('%Y', date) = ?
        """, (cat_id, f"{current_month:02d}", str(current_year)))

        spent_data = cursor.fetchone()
        spent_amount = spent_data[0] if spent_data[0] else 0
        total_spent += spent_amount

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞
        if limit_amount > 0:
            usage_percent = (spent_amount / limit_amount) * 100
            status = "‚úÖ" if spent_amount <= limit_amount else "‚ùå"
        else:
            usage_percent = 0
            status = "‚ö†Ô∏è"

        report += f"{status} {cat_name}:\n"
        report += f"   –õ–∏–º–∏—Ç: {format_money(limit_amount)}\n"
        report += f"   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_money(spent_amount)} ({usage_percent:.1f}%)\n\n"

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if total_limit > 0:
        total_percent = (total_spent / total_limit) * 100
        total_status = "‚úÖ" if total_spent <= total_limit else "‚ùå"
    else:
        total_percent = 0
        total_status = "‚ö†Ô∏è"

    report += f"–ò–¢–û–ì–û {total_status}:\n"
    report += f"–û–±—â–∏–π –ª–∏–º–∏—Ç: {format_money(total_limit)}\n"
    report += f"–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {format_money(total_spent)} ({total_percent:.1f}%)"

    conn.close()
    await update.message.reply_text(report)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv("TGbotTOKEN")
    if not bot_token:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TGbotTOKEN —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(bot_token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("report", show_report))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    application.add_handler(CommandHandler("categories", categories_menu))

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    add_category_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_category_start, pattern='^add_category$')],
        states={
            CATEGORY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_category_finish)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(add_category_conv)

    # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    edit_category_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_category_start, pattern='^edit_category$')],
        states={
            CATEGORY_EDIT: [
                CallbackQueryHandler(edit_category_select, pattern='^edit_\d+$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_category_finish)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(edit_category_conv)

    # ConversationHandler –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    delete_category_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(delete_category_start, pattern='^delete_category$')],
        states={
            CATEGORY_DELETE: [
                CallbackQueryHandler(delete_category_confirm, pattern='^delete_\d+$'),
                CallbackQueryHandler(delete_category_finish, pattern='^confirm_delete_\d+$|^cancel_delete$')
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(delete_category_conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–∏–º–∏—Ç–æ–≤
    application.add_handler(CommandHandler("limits", limits_menu))

    # ConversationHandler –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞
    set_limit_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(set_limit_start, pattern='^set_limit$')],
        states={
            SET_LIMIT: [
                CallbackQueryHandler(set_limit_category, pattern='^setlimit_\d+$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_limit_finish)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(set_limit_conv)

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
    add_expense_conv = ConversationHandler(
        entry_points=[CommandHandler("expense", add_expense_start)],
        states={
            ADD_EXPENSE: [CallbackQueryHandler(add_expense_category, pattern='^expense_\d+$')],
            EXPENSE_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense_finish)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(add_expense_conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    application.add_handler(CallbackQueryHandler(list_categories, pattern='^list_categories$'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
